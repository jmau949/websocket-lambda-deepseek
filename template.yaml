AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Fastify WebSocket API with API Gateway, Lambda and DynamoDB

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - dev
      - staging
      - production
    Description: Environment type
  
  CognitoUserPoolId:
    Type: String
    Description: Cognito User Pool ID
    Default: ''
  
  CognitoClientId:
    Type: String
    Description: Cognito Client ID
    Default: ''
  
  DomainName:
    Type: String
    Default: ws.jonathanmau.com
    Description: Custom domain name for WebSocket API
  
  HostedZoneId:
    Type: String
    Description: Route 53 Hosted Zone ID for jonathanmau.com domain
    
  SentryDsn:
    Type: String
    Default: ''
    Description: Sentry DSN
    
  SentryLambdaLayerArn:
    Type: String
    Default: ''
    Description: Sentry Lambda Layer ARN
    
  WebSocketApiGatewayName:
    Type: String
    Default: 'jonathanmau-websocket-api'
    Description: Name for the WebSocket API Gateway (should remain consistent across deployments)

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Handler: index.handler
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        CONNECTIONS_TABLE: !Ref ConnectionsTable
        COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
        COGNITO_CLIENT_ID: !Ref CognitoClientId
        SENTRY_DSN: !Ref SentryDsn

Resources:
  # Create a new ACM Certificate for the subdomain
  WsApiCertificate:
    Type: AWS::CertificateManager::Certificate
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  # WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref WebSocketApiGatewayName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      ApiKeySelectionExpression: "$request.header.x-api-key"

  # Authorizer
  WebSocketAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: CognitoAuthorizer
      ApiId: !Ref WebSocketApi
      AuthorizerType: JWT
      IdentitySource: 
        - 'route.request.header.Cookie'
      JwtConfiguration:
        Audience:
          - !Ref CognitoClientId
        Issuer: !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPoolId}'

  # DynamoDB Table for connections
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: WebSocketConnectionsTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH

  # Routes and Integrations
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: JWT
      AuthorizerId: !Ref WebSocketAuthorizer
      RouteResponseSelectionExpression: $default
      OperationName: ConnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref ConnectIntegration

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      RouteResponseSelectionExpression: $default
      OperationName: DisconnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref DisconnectIntegration

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations

  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: message
      AuthorizationType: NONE
      RouteResponseSelectionExpression: $default
      OperationName: MessageRoute
      Target: !Join
        - /
        - - integrations
          - !Ref MessageIntegration

  MessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessageFunction.Arn}/invocations

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      RouteResponseSelectionExpression: $default
      OperationName: DefaultRoute
      Target: !Join
        - /
        - - integrations
          - !Ref DefaultIntegration

  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultFunction.Arn}/invocations

  # Lambda Functions
  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/index.connect
      Layers:
        - !Ref SentryLambdaLayerArn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/index.disconnect
      Layers:
        - !Ref SentryLambdaLayerArn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  MessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/index.message
      Layers:
        - !Ref SentryLambdaLayerArn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  DefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/index.default
      Layers:
        - !Ref SentryLambdaLayerArn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  # Lambda Log Groups with 30-day retention
  ConnectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ConnectFunction}"
      RetentionInDays: 30

  DisconnectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DisconnectFunction}"
      RetentionInDays: 30

  MessageFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/aws/lambda/${MessageFunction}"
      RetentionInDays: 30

  DefaultFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DefaultFunction}"
      RetentionInDays: 30

  # WebSocket API Deployment and Stage
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - MessageRoute
      - DefaultRoute
    Properties:
      ApiId: !Ref WebSocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref Deployment
      StageName: Prod

  # Domain Configuration for WebSocket API
  WebSocketApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DomainName: !Ref DomainName
      DomainNameConfigurations:
        - CertificateArn: !Ref WsApiCertificate
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  WebSocketApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn:
      - Stage
      - WebSocketApiDomainName
    Properties:
      ApiId: !Ref WebSocketApi
      DomainName: !Ref DomainName
      Stage: Prod

  # DNS Record for WebSocket Subdomain
  WsDnsRecord:
    Type: AWS::Route53::RecordSet
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    DependsOn: WebSocketApiDomainName
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt WebSocketApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt WebSocketApiDomainName.RegionalHostedZoneId

Outputs:
  WebSocketApiId:
    Description: "API Gateway WebSocket API ID"
    Value: !Ref WebSocketApi
    Export:
      Name: WebSocketApiId

  WebSocketDefaultURL:
    Description: "API Gateway WebSocket URL"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  WebSocketCustomDomainURL:
    Description: "Custom domain WebSocket URL"
    Value: !Sub "wss://${DomainName}"
    Export:
      Name: WebSocketCustomDomainURL

  ConnectionsTableArn:
    Description: "DynamoDB Connections Table ARN"
    Value: !GetAtt ConnectionsTable.Arn
    Export:
      Name: WebSocketConnectionsTableArn

  WsApiCertificateArn:
    Description: "ARN of the WebSocket API Certificate"
    Value: !Ref WsApiCertificate
    Export:
      Name: WebSocketApiCertificateArn
      
  WebSocketApiDomainNameOutput:
    Description: "Domain name for the WebSocket API Gateway"
    Value: !GetAtt WebSocketApiDomainName.RegionalDomainName
    Export:
      Name: WebSocketApiDomainName