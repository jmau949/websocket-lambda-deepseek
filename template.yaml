AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  Fastify WebSocket API with API Gateway, Lambda and DynamoDB. 
  The Message Lambda function connects to the LLM service via an Application Load Balancer
  in a private VPC using the new architecture.

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - dev
      - staging
      - production
    Description: Environment type

  CognitoUserPoolId:
    Type: String
    Description: Cognito User Pool ID
    Default: ""

  CognitoClientId:
    Type: String
    Description: Cognito Client ID
    Default: ""

  DomainName:
    Type: String
    Default: ws.jonathanmau.com
    Description: Custom domain name for WebSocket API

  FrontendUrl:
    Type: String
    Default: ai.jonathanmau.com
    Description: Frontend URL for CORS and origin validation

  HostedZoneId:
    Type: String
    Description: Route 53 Hosted Zone ID for jonathanmau.com domain

  SentryDsn:
    Type: String
    Default: ""
    Description: Sentry DSN

  SentryLambdaLayerArn:
    Type: String
    Default: ""
    Description: Sentry Lambda Layer ARN

  WebSocketApiGatewayName:
    Type: String
    Default: "jonathanmau-websocket-deepseek"
    Description: Name for the WebSocket API Gateway (should remain consistent across deployments)

  # Parameters for ALB endpoint
  AlbDnsName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /websocket-lambda-deepseek/SharedAiServicesAlbDnsName
    Description: DNS Name of the Application Load Balancer for LLM service

  VpcLinkId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /websocket-lambda-deepseek/SharedAiServicesVpcLinkId
    Description: ID of the VPC Link for API Gateway v2

  # Parameter to control whether to create DynamoDB tables or use existing ones
  CreateDynamoDBTables:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Whether to create DynamoDB tables or use existing ones

Conditions:
  ShouldCreateDynamoDBTables: !Equals [!Ref CreateDynamoDBTables, "true"]

Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Runtime: nodejs20.x
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        CONNECTIONS_TABLE: WebSocketConnectionsTable
        CHAT_SESSIONS_TABLE: WebSocketChatSessionsTable
        COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
        COGNITO_CLIENT_ID: !Ref CognitoClientId
        SENTRY_DSN: !Ref SentryDsn
        FRONTEND_URL: !Ref FrontendUrl
    Tags:
      Project: deepseek
      Environment: !Ref Environment

Resources:
  # Create a new ACM Certificate for the subdomain
  WsApiCertificate:
    Type: AWS::CertificateManager::Certificate
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: Project
          Value: deepseek
        - Key: Environment
          Value: !Ref Environment

  # WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref WebSocketApiGatewayName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      ApiKeySelectionExpression: "$request.header.x-api-key"
      Tags:
        Project: deepseek
        Environment: !Ref Environment

  # Authorizer
  WebSocketAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: CognitoAuthorizer
      ApiId: !Ref WebSocketApi
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations
      IdentitySource:
        - "route.request.header.Cookie"

  # DynamoDB Table for connections - only create if condition is true
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Condition: ShouldCreateDynamoDBTables
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: WebSocketConnectionsTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Project
          Value: deepseek
        - Key: Environment
          Value: !Ref Environment

  # DynamoDB Table for chat sessions - only create if condition is true
  ChatSessionsTable:
    Type: AWS::DynamoDB::Table
    Condition: ShouldCreateDynamoDBTables
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: WebSocketChatSessionsTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Project
          Value: deepseek
        - Key: Environment
          Value: !Ref Environment

  # Routes and Integrations
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebSocketAuthorizer
      RouteResponseSelectionExpression: $default
      OperationName: ConnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref ConnectIntegration

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      RouteResponseSelectionExpression: $default
      OperationName: DisconnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref DisconnectIntegration

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations

  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: message
      AuthorizationType: NONE
      RouteResponseSelectionExpression: $default
      OperationName: MessageRoute
      Target: !Join
        - /
        - - integrations
          - !Ref MessageIntegration

  MessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessageFunction.Arn}/invocations

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      RouteResponseSelectionExpression: $default
      OperationName: DefaultRoute
      Target: !Join
        - /
        - - integrations
          - !Ref DefaultIntegration

  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultFunction.Arn}/invocations

  # Authorizer Lambda Function
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/authorizer.handler
      Layers:
        - !Ref SentryLambdaLayerArn
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_CLIENT_ID: !Ref CognitoClientId
          FRONTEND_URL: !Ref FrontendUrl
      Tags:
        Project: deepseek
        Environment: !Ref Environment

  # Lambda Functions
  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/connect.handler
      Layers:
        - !Ref SentryLambdaLayerArn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: WebSocketConnectionsTable
        - DynamoDBCrudPolicy:
            TableName: WebSocketChatSessionsTable
      Tags:
        Project: deepseek
        Environment: !Ref Environment

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/disconnect.handler
      Layers:
        - !Ref SentryLambdaLayerArn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: WebSocketConnectionsTable
        - DynamoDBCrudPolicy:
            TableName: WebSocketChatSessionsTable
      Tags:
        Project: deepseek
        Environment: !Ref Environment

  MessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/message.handler
      Timeout: 900
      Layers:
        - !Ref SentryLambdaLayerArn
      Environment:
        Variables:
          LLM_ENDPOINT: !Ref AlbDnsName
          API_ID: !Ref WebSocketApi
          RUNNING_IN_VPC: "false" 
          ALB_VPC_LINK_ID: !Ref VpcLinkId
      Policies:
        - DynamoDBCrudPolicy:
            TableName: WebSocketConnectionsTable
        - DynamoDBCrudPolicy:
            TableName: WebSocketChatSessionsTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
                - "execute-api:Invoke"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/POST/@connections/*"
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/GET/@connections/*"
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/DELETE/@connections/*"
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/Prod/@connections/*"
            - Effect: Allow
              Action:
                - "dynamodb:Scan"
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WebSocketConnectionsTable"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WebSocketConnectionsTable/index/*"
            - Effect: Allow
              Action:
                - "apigateway:GET"
                - "apigateway:POST"
              Resource:
                - !Sub "arn:aws:apigateway:${AWS::Region}::/apis/${WebSocketApi}"
                - !Sub "arn:aws:apigateway:${AWS::Region}::/apis/${WebSocketApi}/stages/Prod"
                - !Sub "arn:aws:apigateway:${AWS::Region}::/apis/${WebSocketApi}/routes"
      Tags:
        Project: deepseek
        Environment: !Ref Environment

  DefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/default.handler
      Layers:
        - !Ref SentryLambdaLayerArn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: WebSocketConnectionsTable
        - DynamoDBCrudPolicy:
            TableName: WebSocketChatSessionsTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
                - "execute-api:Invoke"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/POST/@connections/*"
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/GET/@connections/*"
      Tags:
        Project: deepseek
        Environment: !Ref Environment

  # Lambda permission for API Gateway to invoke authorizer
  AuthorizerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthorizerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/authorizers/*

  # Additional Lambda permissions for other functions
  ConnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect

  DisconnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect

  MessageFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MessageFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/message

  DefaultFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefaultFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$default

  # Lambda Log Groups with 30-day retention
  AuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AuthorizerFunction}"
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: deepseek
        - Key: Environment
          Value: !Ref Environment

  ConnectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ConnectFunction}"
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: deepseek
        - Key: Environment
          Value: !Ref Environment

  DisconnectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DisconnectFunction}"
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: deepseek
        - Key: Environment
          Value: !Ref Environment

  MessageFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/aws/lambda/${MessageFunction}"
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: deepseek
        - Key: Environment
          Value: !Ref Environment

  DefaultFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DefaultFunction}"
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: deepseek
        - Key: Environment
          Value: !Ref Environment

  # WebSocket API Deployment and Stage
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - MessageRoute
      - DefaultRoute
    Properties:
      ApiId: !Ref WebSocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref Deployment
      StageName: Prod
      Tags:
        Project: deepseek
        Environment: !Ref Environment

  # Domain Configuration for WebSocket API
  WebSocketApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DomainName: !Ref DomainName
      DomainNameConfigurations:
        - CertificateArn: !Ref WsApiCertificate
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2
      Tags:
        Project: deepseek
        Environment: !Ref Environment

  WebSocketApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn:
      - Stage
      - WebSocketApiDomainName
    Properties:
      ApiId: !Ref WebSocketApi
      DomainName: !Ref DomainName
      Stage: Prod
      # Note: ApiMapping doesn't support tags in CloudFormation

  # DNS Record for WebSocket Subdomain
  WsDnsRecord:
    Type: AWS::Route53::RecordSet
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    DependsOn: WebSocketApiDomainName
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt WebSocketApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt WebSocketApiDomainName.RegionalHostedZoneId
      # Note: Route53 RecordSet doesn't support tags in CloudFormation

Outputs:
  WebSocketApiId:
    Description: "API Gateway WebSocket API ID"
    Value: !Ref WebSocketApi
    Export:
      Name: WebSocketApiId

  WebSocketDefaultURL:
    Description: "API Gateway WebSocket URL"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  WebSocketCustomDomainURL:
    Description: "Custom domain WebSocket URL"
    Value: !Sub "wss://${DomainName}"
    Export:
      Name: WebSocketCustomDomainURL

  ConnectionsTableName:
    Description: "DynamoDB Connections Table Name"
    Value: "WebSocketConnectionsTable"
    Export:
      Name: WebSocketConnectionsTableName

  ChatSessionsTableName:
    Description: "DynamoDB Chat Sessions Table Name"
    Value: "WebSocketChatSessionsTable"
    Export:
      Name: WebSocketChatSessionsTableName

  WsApiCertificateArn:
    Description: "ARN of the WebSocket API Certificate"
    Value: !Ref WsApiCertificate
    Export:
      Name: WebSocketApiCertificateArn

  WebSocketApiDomainNameOutput:
    Description: "Domain name for the WebSocket API Gateway"
    Value: !GetAtt WebSocketApiDomainName.RegionalDomainName
    Export:
      Name: WebSocketApiDomainName